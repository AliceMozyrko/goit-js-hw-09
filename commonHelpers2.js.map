{"version":3,"file":"commonHelpers2.js","sources":["../src/js/2-form.js"],"sourcesContent":["// Оголоси поза будь - якими функціями об’єкт formData з полями email та message,\n// які спочатку мають порожні рядки як значення: { email: \"\", message: \"\" }.\n\n// Використовуй метод делегування для відстеження змін у формі через подію\n// input.Зберігай актуальні дані з полів email та message у formData та \n// записуй цей об’єкт у локальне сховище.Використовуй ключ\n// \"feedback-form-state\" для зберігання даних у сховищі.\n// При завантаженні сторінки перевір, чи є дані у локальному сховищі. \n// Якщо так, використовуй їх для заповнення форми та об'єкта formData. \n// Якщо ні, залиш поля форми порожніми.\n// Перед відправленням форми переконайся, що обидва поля форми заповнені. \n// Якщо будь - яке з полів(властивостей об’єкта formData) порожнє,\n// показуй сповіщення з текстом «Fill please all fields». \n// Якщо всі поля заповнені, виведи у консоль об’єкт formData з \n// актуальними значеннями, очисти локальне сховище, об’єкт formData і \n// поля форми.\n\nconst formData = {\n  email: \"\",\n  message: \"\"\n};\n\nconst FEEDBACK_KEY = \"feedback-form-state\";\n\nconst form = document.querySelector(\".feedback-form\");\n\nfunction onFormSubmit(event) {\n  event.preventDefault();\n  const trimEmail = formData.email.trim();\n  const trimMsg = formData.message.trim();\n  if (trimEmail === \"\" || trimMsg === \"\") {\n    alert(\"Fill please all fields\");\n    return;\n  }\n  console.log({ email: trimEmail, message: trimMsg });\n  localStorage.setItem(FEEDBACK_KEY, JSON.stringify(formData)); // Оновлення localStorage після відправки форми\n  form.reset();\n}\n\nfunction onFormInput(event) {\n  const { name, value } = event.target;\n  formData[name] = value.trim();\n}\n\nform.querySelectorAll('input, textarea').forEach(input => {\n  input.addEventListener('input', onFormInput);\n});\n\nform.addEventListener(\"submit\", onFormSubmit);\n\nwindow.addEventListener(\"load\", () => {\n  const savedFormData = JSON.parse(localStorage.getItem(FEEDBACK_KEY)) || {};\n  formData.email = savedFormData.email || \"\";\n  formData.message = savedFormData.message || \"\";\n  const emailInput = form.querySelector('input[type=\"email\"]');\n  const messageInput = form.querySelector(\"textarea\");\n  emailInput.value = formData.email;\n  messageInput.value = formData.message;\n});\n"],"names":["formData","FEEDBACK_KEY","form","onFormSubmit","event","trimEmail","trimMsg","onFormInput","name","value","input","savedFormData","emailInput","messageInput"],"mappings":"oDAiBA,MAAMA,EAAW,CACf,MAAO,GACP,QAAS,EACX,EAEMC,EAAe,sBAEfC,EAAO,SAAS,cAAc,gBAAgB,EAEpD,SAASC,EAAaC,EAAO,CAC3BA,EAAM,eAAc,EACpB,MAAMC,EAAYL,EAAS,MAAM,KAAI,EAC/BM,EAAUN,EAAS,QAAQ,KAAI,EACrC,GAAIK,IAAc,IAAMC,IAAY,GAAI,CACtC,MAAM,wBAAwB,EAC9B,MACD,CACD,QAAQ,IAAI,CAAE,MAAOD,EAAW,QAASC,CAAO,CAAE,EAClD,aAAa,QAAQL,EAAc,KAAK,UAAUD,CAAQ,CAAC,EAC3DE,EAAK,MAAK,CACZ,CAEA,SAASK,EAAYH,EAAO,CAC1B,KAAM,CAAE,KAAAI,EAAM,MAAAC,GAAUL,EAAM,OAC9BJ,EAASQ,CAAI,EAAIC,EAAM,KAAI,CAC7B,CAEAP,EAAK,iBAAiB,iBAAiB,EAAE,QAAQQ,GAAS,CACxDA,EAAM,iBAAiB,QAASH,CAAW,CAC7C,CAAC,EAEDL,EAAK,iBAAiB,SAAUC,CAAY,EAE5C,OAAO,iBAAiB,OAAQ,IAAM,CACpC,MAAMQ,EAAgB,KAAK,MAAM,aAAa,QAAQV,CAAY,CAAC,GAAK,GACxED,EAAS,MAAQW,EAAc,OAAS,GACxCX,EAAS,QAAUW,EAAc,SAAW,GAC5C,MAAMC,EAAaV,EAAK,cAAc,qBAAqB,EACrDW,EAAeX,EAAK,cAAc,UAAU,EAClDU,EAAW,MAAQZ,EAAS,MAC5Ba,EAAa,MAAQb,EAAS,OAChC,CAAC"}